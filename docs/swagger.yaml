definitions:
  controller.ProjectRequestCreate:
    properties:
      default_branch:
        type: string
      name:
        type: string
      source:
        type: string
    required:
    - name
    - source
    type: object
  controller.RequestBranchCreate:
    properties:
      name:
        maxLength: 64
        minLength: 3
        type: string
    required:
    - name
    type: object
  controller.UserRequestCreate:
    properties:
      email:
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
      username:
        maxLength: 64
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  entity.Branch:
    properties:
      config:
        $ref: '#/definitions/entity.PipelineConfig'
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      id:
        type: string
      name:
        maxLength: 256
        minLength: 1
        type: string
      project_id:
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  entity.Capability:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      description:
        type: string
      id:
        type: string
      name:
        maxLength: 256
        minLength: 3
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  entity.Permission:
    properties:
      capabilities:
        items:
          $ref: '#/definitions/entity.Capability'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      description:
        type: string
      id:
        type: string
      name:
        maxLength: 256
        minLength: 3
        type: string
      path:
        type: string
      updated_at:
        type: string
    required:
    - name
    - path
    type: object
  entity.PipelineConfig:
    properties:
      jobs:
        items:
          $ref: '#/definitions/entity.PipelineConfigJob'
        type: array
      pipelines:
        items:
          $ref: '#/definitions/entity.PipelineConfigPipeline'
        type: array
    type: object
  entity.PipelineConfigJob:
    properties:
      name:
        type: string
      query:
        additionalProperties:
          type: string
        type: object
      request_type:
        type: string
      url:
        type: string
    type: object
  entity.PipelineConfigPipeline:
    properties:
      jobs:
        items:
          $ref: '#/definitions/entity.PipelineConfigPipelineJob'
        type: array
      name:
        type: string
    type: object
  entity.PipelineConfigPipelineJob:
    properties:
      name:
        type: string
    type: object
  entity.Project:
    properties:
      branches:
        items:
          $ref: '#/definitions/entity.Branch'
        type: array
      created_at:
        type: string
      default_branch:
        maxLength: 256
        minLength: 1
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      description:
        type: string
      id:
        type: string
      name:
        description: display name
        maxLength: 256
        minLength: 1
        type: string
      namespace_id:
        description: foreign key for the parent namespace
        type: string
      path:
        type: string
      source:
        type: string
      updated_at:
        type: string
    required:
    - default_branch
    - name
    - source
    type: object
  entity.Role:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      description:
        type: string
      id:
        type: string
      name:
        maxLength: 256
        minLength: 3
        type: string
      permissions:
        items:
          $ref: '#/definitions/entity.Permission'
        type: array
      updated_at:
        type: string
    required:
    - name
    type: object
  entity.User:
    properties:
      admin:
        type: boolean
      bio:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/sql.NullTime'
      email:
        type: string
      id:
        type: string
      image:
        type: string
      roles:
        description: |-
          "many to many" association
          https://gorm.io/docs/many_to_many.html
        items:
          $ref: '#/definitions/entity.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  pkg.Error:
    properties:
      code:
        example: 500
        type: integer
      errors:
        additionalProperties:
          type: string
        type: object
      status:
        example: fail
        type: string
      type:
        example: '*fiber.Error'
        type: string
    type: object
  presenter.Success:
    properties:
      status:
        example: success
        type: string
    type: object
  presenter.UserLogin:
    properties:
      id:
        type: string
      status:
        example: success
        type: string
      token:
        type: string
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/v1/database/migrate:
    post:
      description: migrate databases
      operationId: database-migrate
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.Success'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: migrate databases
      tags:
      - database
  /api/v1/projects:
    get:
      description: get projects
      operationId: get-projects
      parameters:
      - description: search by path
        in: query
        name: path
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Project'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get projects
      tags:
      - project
    post:
      description: create a project
      operationId: create-project
      parameters:
      - description: Project body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.ProjectRequestCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: create a project
      tags:
      - project
  /api/v1/projects/{project_id}:
    get:
      description: get a project
      operationId: get-project
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get a project
      tags:
      - project
    put:
      description: update a project
      operationId: update-project
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      - description: Project body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/entity.Project'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: update a project
      tags:
      - project
  /api/v1/projects/{project_id}/branches:
    get:
      description: get all branches
      operationId: get-branches
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Branch'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get all project branches
      tags:
      - branch
    post:
      description: create a branch
      operationId: create-branch
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      - description: creation request body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.RequestBranchCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: create a branch
      tags:
      - branch
  /api/v1/projects/{project_id}/branches/{branch_name}:
    get:
      description: get a project branch
      operationId: get-branch
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      - description: branch name
        in: path
        name: branch_name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get a project branch
      tags:
      - branch
    put:
      description: update a branch
      operationId: update-branch
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      - description: branch name
        in: path
        name: branch_name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: update a branch
      tags:
      - branch
  /api/v1/projects/{project_id}/branches/{branch_name}/pipelines/{pipeline_name}:
    post:
      description: create a pipeline
      operationId: create-pipeline
      parameters:
      - description: project id
        in: path
        name: project_id
        required: true
        type: string
      - description: branch name
        in: path
        name: branch_name
        required: true
        type: string
      - description: pipeline name
        in: path
        name: pipeline_name
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: create a pipeline
      tags:
      - pipeline
  /api/v1/users:
    get:
      description: get all users
      operationId: get-users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get all users
      tags:
      - user
    post:
      description: create a user
      operationId: create-user
      parameters:
      - description: User body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequestCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      summary: create a user
      tags:
      - user
  /api/v1/users/login:
    get:
      description: login
      operationId: login-user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.UserLogin'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      summary: login
      tags:
      - user
  /api/v1/users/user/{user_id}:
    get:
      description: get a user
      operationId: get-user
      parameters:
      - description: account id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.Error'
      security:
      - ApiKeyAuth: []
      summary: get a user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
